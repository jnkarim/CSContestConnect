@model IEnumerable<CSContestConnect.Web.Models.Event>

@{
    ViewData["Title"] = "Rejected Events";
    var items = Model?.ToList() ?? new List<CSContestConnect.Web.Models.Event>();
    string Short(string? s, int n = 120) =>
        string.IsNullOrWhiteSpace(s) ? "No description provided."
        : (s!.Length <= n ? s : s.Substring(0, n) + "…");
}

<div class="d-flex align-items-center justify-content-between mb-4">
    <div class="d-flex align-items-center gap-3">
        <h2 class="title-gradient mb-0">@ViewData["Title"]</h2>
        <span class="badge bg-accent-soft text-accent fw-semibold px-3 py-2">@items.Count</span>
    </div>

    @* optional quick filter/sort placeholders (non-functional here) *@
    <div class="d-flex gap-2">
        <input class="form-control form-control-sm bg-dim text-white border-0"
               placeholder="Search title, author, location" aria-label="Search" />
        <select class="form-select form-select-sm bg-dim text-white border-0" aria-label="Sort">
            <option selected>Latest first</option>
            <option>Oldest first</option>
            <option>Starts soonest</option>
        </select>
    </div>
</div>

@if (TempData["Msg"] is string msg)
{
    <div class="alert alert-info shadow-sm">@msg</div>
}

@if (!items.Any())
{
    <div class="empty-card card border-0 bg-dim shadow-sm text-center py-5">
        <div class="card-body">
            <div class="emoji mb-2">✨</div>
            <h5 class="text-accent mb-1">No rejected events</h5>
            <p class="text-muted mb-0">Nice! Nothing has been rejected, or they were restored/approved.</p>
        </div>
    </div>
}
else
{
    <div class="row g-3">
        @foreach (var e in items)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="csc-card card bg-dim border-0 shadow-sm h-100">
                    <div class="card-body d-flex flex-column gap-3">
                        <!-- Header: Title + ID/time -->
                        <div class="d-flex align-items-start justify-content-between gap-2">
                            <div>
                                <div class="fw-semibold text-white mb-1">@e.Title</div>
                                <div class="tiny text-muted">
                                    <span class="me-2">#@e.Id</span>
                                    <span>created @e.CreatedAt.ToLocalTime():g</span>
                                </div>
                            </div>
                            <span class="chip chip-danger">Rejected</span>
                        </div>

                        <!-- When + Location -->
                        <div class="d-flex flex-column gap-1">
                            <div class="d-flex align-items-center gap-2 tiny text-muted">
                                <i class="bi bi-calendar3"></i>
                                <span>@e.StartsAt.ToLocalTime():g – @e.EndsAt.ToLocalTime():g</span>
                            </div>
                            <div class="d-flex align-items-center gap-2 tiny">
                                <i class="bi bi-geo-alt text-muted"></i>
                                @if (e.IsOnline)
                                {
                                    <span class="chip chip-info">Online</span>
                                }
                                else
                                {
                                    <span class="chip chip-neutral">
                                        @(string.IsNullOrWhiteSpace(e.Location) ? "TBA" : e.Location)
                                    </span>
                                }
                            </div>
                        </div>

                        <!-- Author -->
                        <div class="author tiny text-muted">
                            <i class="bi bi-person-badge me-1"></i>
                            <span>@(e.CreatedBy?.Email ?? e.CreatedById)</span>
                            @if (!string.IsNullOrWhiteSpace(e.CreatedBy?.DisplayName))
                            {
                                <span class="ms-1">· @e.CreatedBy!.DisplayName</span>
                            }
                        </div>

                        <!-- Description -->
                        <p class="mb-0 small text-body-secondary">@Short(e.Description)</p>

                        <!-- Actions -->
                        <div class="mt-auto d-flex justify-content-between align-items-center">
                            <div class="d-flex gap-2">
                                <form asp-controller="AdminEvents" asp-action="Restore" asp-route-id="@e.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button class="btn btn-ghost btn-sm" type="submit" title="Move back to 'Pending'">
                                        <i class="bi bi-arrow-counterclockwise me-1"></i> Restore
                                    </button>
                                </form>
                                <form asp-controller="AdminEvents" asp-action="ApproveFromRejected" asp-route-id="@e.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button class="btn btn-accent btn-sm" type="submit">
                                        <i class="bi bi-check-circle me-1"></i> Approve
                                    </button>
                                </form>
                            </div>
                            <span class="tiny text-muted">UTC @e.StartsAt:g – @e.EndsAt:g</span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Styles {
    <style>
        /* Theme helpers */
        .text-accent { color: #a78bfa !important; }                  /* soft purple */
        .bg-accent-soft { background: rgba(167,139,250,.18) !important; }
        .bg-dim { background: #111319 !important; }                  /* deep, nearly-black */
        .title-gradient {
            background: linear-gradient(90deg, #c084fc, #a78bfa, #7c3aed);
            -webkit-background-clip: text; background-clip: text; color: transparent;
        }
        .tiny { font-size: .84rem; }

        /* Chips */
        .chip {
            display: inline-flex; align-items: center; gap: .35rem;
            padding: .25rem .55rem; border-radius: 999px; font-size: .78rem; font-weight: 600;
            background: rgba(255,255,255,.06); color: #cbd5e1;
            border: 1px solid rgba(255,255,255,.08);
        }
        .chip-danger { color: #fca5a5; border-color: rgba(239,68,68,.2); background: rgba(239,68,68,.1); }
        .chip-info   { color: #67e8f9; border-color: rgba(6,182,212,.25); background: rgba(6,182,212,.1); }
        .chip-neutral{ color: #e5e7eb; border-color: rgba(255,255,255,.15); background: rgba(255,255,255,.06); }

        /* Cards */
        .csc-card {
            position: relative;
            backdrop-filter: blur(6px);
            transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
            border: 1px solid rgba(167,139,250,.14) !important;
        }
        .csc-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 28px rgba(0,0,0,.35), 0 0 0 1px rgba(167,139,250,.22) inset;
            border-color: rgba(167,139,250,.28) !important;
        }

        /* Buttons */
        .btn-ghost {
            background: transparent;
            border: 1px solid rgba(255,255,255,.16);
            color: #e5e7eb;
        }
        .btn-ghost:hover { border-color: rgba(255,255,255,.28); color:#fff; }

        .btn-accent {
            background: linear-gradient(180deg, #a78bfa, #7c3aed);
            border: none; color: #0b0b10;
            box-shadow: 0 6px 18px rgba(124,58,237,.35);
        }
        .btn-accent:hover { filter: brightness(1.06); color:#050507; }

        /* Inputs */
        .form-control.bg-dim, .form-select.bg-dim {
            background: #141827 !important; border: 1px solid rgba(255,255,255,.08) !important;
        }
        .form-control.bg-dim:focus, .form-select.bg-dim:focus {
            border-color: rgba(167,139,250,.45) !important; box-shadow: 0 0 0 .2rem rgba(167,139,250,.15);
        }

        /* Empty state */
        .empty-card .emoji { font-size: 2.25rem; }
    </style>
}
