@model CSContestConnect.Web.Models.Event
@{
    ViewData["Title"] = "Create Event";
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<style>
    /* ===== Dark Theme Tokens (tweak if you like) ===== */
    :root {
        --bg-0:#0b0e12;              /* page background */
        --bg-1:#11161c;              /* cards */
        --bg-2:#0e1319;              /* inputs */
        --bg-3:#0c1117;              /* dropzone base */
        --tx-0:#e6edf3;              /* primary text */
        --tx-1:#c1c8d1;              /* secondary text */
        --tx-2:#9aa4b2;              /* muted */
        --bd-0:#242b36;              /* borders */
        --bd-1:#1d2530;              /* soft borders */
        --ac-0:#7c3aed;              /* primary accent */
        --ac-1:#a78bfa;              /* primary accent light */
        --ok-0:#22c55e;              /* success */
        --warn-0:#f59e0b;            /* warning */
        --err-0:#ef4444;             /* danger */
        --ring:0 0 0 .2rem rgba(124,58,237,.35);
    }

    body { background:var(--bg-0); color:var(--tx-0); }

    /* ===== Cards / Sections ===== */
    .csc-page-title { letter-spacing:.2px }
    .csc-card {
        background:var(--bg-1);
        border:1px solid var(--bd-0);
        border-radius:16px;
        box-shadow:0 10px 30px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.02);
    }
    .csc-card .card-header{
        background:linear-gradient(180deg, rgba(255,255,255,.03), transparent);
        border-bottom:1px solid var(--bd-1);
        color:var(--tx-0);
    }
    .section-title { font-weight:600; font-size:1rem; letter-spacing:.2px }

    /* ===== Inputs ===== */
    .form-label{ color:var(--tx-0) }
    .form-control, .form-select {
        background:var(--bg-2) !important;
        color:var(--tx-0) !important;
        border:1px solid var(--bd-0) !important;
    }
    .form-control:focus, .form-select:focus{
        border-color:var(--ac-0) !important;
        box-shadow:var(--ring) !important;
    }
    .input-group-text{
        background:var(--bg-2);
        border:1px solid var(--bd-0);
        color:var(--tx-1);
    }
    .form-check-label{ color:var(--tx-0) }
    .field-hint{ font-size:.875rem; color:var(--tx-2) }

    ::placeholder{ color:var(--tx-2) !important; opacity:1 }
    :-ms-input-placeholder{ color:var(--tx-2) }
    ::-ms-input-placeholder{ color:var(--tx-2) }

    /* ===== Buttons ===== */
    .btn-primary{
        background:linear-gradient(180deg,var(--ac-0),#6d28d9);
        border-color:#6d28d9;
    }
    .btn-primary:hover{ background:linear-gradient(180deg,#8b5cf6,var(--ac-0)); border-color:#7c3aed }
    .btn-outline-secondary{ color:var(--tx-1); border-color:var(--bd-0) }
    .btn-outline-secondary:hover{ color:var(--tx-0); border-color:var(--tx-1); background:rgba(255,255,255,.04) }

    /* ===== Dropzone ===== */
    .dropzone{
        border:1.5px dashed var(--bd-0);
        border-radius:14px;
        padding:18px;
        text-align:center;
        background:
            radial-gradient(1200px 300px at 50% 0, rgba(124,58,237,.08), transparent 70%),
            var(--bg-3);
        color:var(--tx-1);
        transition:border-color .2s ease, background .2s ease, color .2s ease;
    }
    .dropzone.dragover{ border-color:var(--ac-1); color:var(--tx-0); background:linear-gradient(180deg,rgba(124,58,237,.08), transparent), var(--bg-3) }
    .preview-img{ max-height:200px; border-radius:12px; object-fit:cover; width:100%; border:1px solid var(--bd-0) }

    /* Misc */
    .pill{ display:inline-flex; align-items:center; gap:.4rem; padding:.25rem .5rem; border-radius:999px; font-size:.8rem; border:1px solid var(--bd-0); background:#0f1420; color:var(--tx-1) }
</style>

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div>
            <h1 class="csc-page-title h3 mb-1">Create Event</h1>
            <div class="text-muted">Post a hackathon or programming contest for the community</div>
        </div>
        <a asp-action="My" class="btn btn-outline-secondary"><i class="bi bi-arrow-left"></i> My Events</a>
    </div>

    <form asp-action="Create" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <div class="row g-4">
            <!-- Main column -->
            <div class="col-lg-8">
                <div class="card csc-card">
                    <div class="card-header d-flex align-items-center gap-2">
                        <i class="bi bi-card-text"></i>
                        <span class="section-title">Basics</span>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="Title" class="form-label">Event title</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-megaphone"></i></span>
                                <input asp-for="Title" class="form-control" placeholder="e.g., Data Structures Showdown 2025" />
                            </div>
                            <div class="field-hint">Max 160 characters</div>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="6" placeholder="Tracks, rules, judging, prizes, timeline…"></textarea>
                            <div class="field-hint">Line breaks are preserved.</div>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Starts At</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                                    <input
                                        class="form-control"
                                        type="datetime-local"
                                        name="StartsAt"
                                        value="@(Model.StartsAt == default ? "" : Model.StartsAt.ToLocalTime().ToString("yyyy-MM-ddTHH:mm"))" />
                                </div>
                                <div class="field-hint">Your local time; saved as <strong>UTC</strong>.</div>
                                <span asp-validation-for="StartsAt" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Ends At</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-hourglass-split"></i></span>
                                    <input
                                        class="form-control"
                                        type="datetime-local"
                                        name="EndsAt"
                                        value="@(Model.EndsAt == default ? "" : Model.EndsAt.ToLocalTime().ToString("yyyy-MM-ddTHH:mm"))" />
                                </div>
                                <div class="field-hint">Must be after start; saved as <strong>UTC</strong>.</div>
                                <span asp-validation-for="EndsAt" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row g-3 mt-1">
                            <div class="col-md-7">
                                <label asp-for="Location" class="form-label">Location</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                    <input asp-for="Location" class="form-control" placeholder="e.g., CSE Auditorium, Level 3 — or leave blank if Online" />
                                </div>
                                <span asp-validation-for="Location" class="text-danger"></span>
                            </div>
                            <div class="col-md-5">
                                <label asp-for="IsOnline" class="form-label d-block">Mode</label>
                                <div class="form-check form-switch">
                                    <input asp-for="IsOnline" class="form-check-input" role="switch" id="isOnlineSwitch" />
                                    <label class="form-check-label" for="isOnlineSwitch">Online event</label>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mt-1">
                            <div class="col-md-4">
                                <label asp-for="Price" class="form-label">Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="Price" class="form-control" placeholder="0 for free" />
                                </div>
                                <span asp-validation-for="Price" class="text-danger"></span>
                            </div>
                            <div class="col-md-4">
                                <label asp-for="TicketCapacity" class="form-label">Ticket Capacity</label>
                                <input asp-for="TicketCapacity" type="number" min="0" class="form-control" placeholder="Leave blank for unlimited" />
                                <div class="field-hint">Registration closes automatically when full.</div>
                                <span asp-validation-for="TicketCapacity" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card csc-card mt-4">
                    <div class="card-header d-flex align-items-center gap-2">
                        <i class="bi bi-image"></i>
                        <span class="section-title">Cover Image</span>
                    </div>
                    <div class="card-body">
                        <div id="dropzone" class="dropzone">
                            <div class="mb-2">
                                <i class="bi bi-cloud-arrow-up fs-3"></i>
                            </div>
                            <div class="mb-2">Drag & drop an image here, or</div>
                            <label class="btn btn-outline-secondary">
                                <input id="fileInput" type="file" name="CoverImage" accept=".jpg,.jpeg,.png,.webp,.gif" hidden>
                                Browse…
                            </label>
                            <div class="field-hint mt-2">Recommended 1200×600+. JPG/PNG/WEBP supported.</div>
                        </div>

                        <div id="previewWrap" class="mt-3" style="display:@(string.IsNullOrEmpty(Model.ImagePath) ? "none" : "block")">
                            <img id="previewImg" class="preview-img" src="@Model.ImagePath" alt="Cover preview" />
                            <div class="d-flex gap-2 mt-2">
                                <button type="button" id="replaceBtn" class="btn btn-sm btn-outline-secondary"><i class="bi bi-arrow-repeat"></i> Replace</button>
                                <button type="button" id="removeBtn" class="btn btn-sm btn-outline-danger"><i class="bi bi-x-lg"></i> Remove</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Side column -->
            <div class="col-lg-4">
                <div class="card csc-card">
                    <div class="card-header d-flex align-items-center gap-2">
                        <i class="bi bi-lightbulb"></i>
                        <span class="section-title">Tips</span>
                    </div>
                    <div class="card-body">
                        <div class="d-flex flex-wrap gap-2 mb-2">
                            <span class="pill"><i class="bi bi-hash"></i> Clear title</span>
                            <span class="pill"><i class="bi bi-people"></i> Team size</span>
                            <span class="pill"><i class="bi bi-trophy"></i> Prizes</span>
                            <span class="pill"><i class="bi bi-clipboard-check"></i> Rules</span>
                        </div>
                        <ul class="mb-0 small" style="color:var(--tx-1);">
                            <li>Set accurate start/end times. We save times in <strong>UTC</strong>.</li>
                            <li>Capacity stops registrations automatically when full.</li>
                            <li>Use the cover image to make your event stand out.</li>
                        </ul>
                    </div>
                </div>

                <div class="card csc-card mt-4">
                    <div class="card-body d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="bi bi-send"></i> Submit for Approval
                        </button>
                        <a asp-action="My" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle"></i> Cancel
                        </a>
                    </div>
                </div>

                @if (TempData["Msg"] is string message)
                {
                    <div class="alert alert-@(TempData["MsgType"] ?? "info") mt-4 mb-0">@message</div>
                }
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Client-side guard: EndsAt must be after StartsAt
        (function () {
            const form = document.querySelector('form.needs-validation');
            form?.addEventListener('submit', function (e) {
                const s = form.querySelector('input[name="StartsAt"]');
                const en = form.querySelector('input[name="EndsAt"]');
                if (s?.value && en?.value) {
                    const start = new Date(s.value);
                    const end = new Date(en.value);
                    if (end <= start) {
                        e.preventDefault();
                        e.stopPropagation();
                        alert('End time must be after start time.');
                    }
                }
            });
        })();

        // Drag & drop / preview
        (function () {
            const dz = document.getElementById('dropzone');
            const input = document.getElementById('fileInput');
            const wrap = document.getElementById('previewWrap');
            const img = document.getElementById('previewImg');
            const replaceBtn = document.getElementById('replaceBtn');
            const removeBtn = document.getElementById('removeBtn');

            function showPreview(file) {
                const reader = new FileReader();
                reader.onload = e => {
                    img.src = e.target.result;
                    wrap.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }

            dz.addEventListener('dragover', ev => { ev.preventDefault(); dz.classList.add('dragover'); });
            dz.addEventListener('dragleave', () => dz.classList.remove('dragover'));
            dz.addEventListener('drop', ev => {
                ev.preventDefault(); dz.classList.remove('dragover');
                const file = ev.dataTransfer.files?.[0];
                if (file) { input.files = ev.dataTransfer.files; showPreview(file); }
            });

            dz.addEventListener('click', () => input.click());
            input.addEventListener('change', () => {
                const file = input.files?.[0];
                if (file) showPreview(file);
            });

            replaceBtn?.addEventListener('click', () => input.click());
            removeBtn?.addEventListener('click', () => {
                input.value = '';
                img.src = '';
                wrap.style.display = 'none';
            });
        })();
    </script>
}
